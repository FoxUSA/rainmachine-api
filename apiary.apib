FORMAT: X-1A

HOST: https://device.ip:8080/api/4/

# RainMachine
RainMachine API for accesing RainMachine devices. 

The RESTful interface is (by default) bound to port 8080 accessible via HTTPS or bound to port 18080 accessible via normal HTTP

##Allowed HTTPs requests:

- `POST` - Creates or updates a resource
- `GET` - Retrieves a resource or list of resources

##Typical Server Responses

- 200 `OK` - The request was successful
- 400 `Bad Request` - The request could not be understood or was missing required parameters.
- 401 `Unauthorized` - Authentication failed or user does not have permissions for the requested operation.
- 404 `Not Found` - Resource was not found.
- 405 `Method Not Allowed` - Requested method is not supported for the specified resource.
- 460 `Cannot Change Password` - Cannot change password
- 501 `Exception Occured` - Exception occured while processing the call
- 541 `Provision Failed` - Cannot provision unit 

# Group API versions
## GET /apiVer
+ Response 200 (application/json)

        {"apiVer": "4.0.0", "hwVer": 2, "swVer": "4.0.219"}

# Group Authentication
## POST /auth/login
Request auth with the device response will include a token to be used on subsequent calls
+ Response 200 (application/json)

        {}

## POST /auth/change
Request a password change 
+ Response 200 (application/json)

        {}

## POST /auth/check
Request a password check
+ Response 200 (application/json)

        {}



# Group Device provision
Device provision related functions
## /provision
### GET
Get device settings


| Variable      | Type      | Description                   |
|---------------|-----------|-------------------------------|
| `httpEnabled` |*boolean*  | If the HTTP server is enabled |
| `useCommandLineArguments` | *boolean* | If program was started with command line arguments |
| `hardwareVersion` | *integer* | Hardware version of this device |
| `databasePath` | *string* | Path to the database | 
| `programListShowInactive` | *boolean* | List inactive programs in queries | 
| `programZonesShowInactive` | *boolean* | List inactive zones in queries | 
| `netName` | *string* | Name of the device | 
| `masterValveBefore` |*integer*| Seconds for which the master valve will open before each zone |

+ Response 200 (application/json)

        {
          "system": {
            "httpEnabled": true, 
            "useCommandLineArguments": false, 
            "hardwareVersion": 2, 
            "databasePath": "/rainmachine-app/DB/Default", 
            "programListShowInactive": true, 
            "programZonesShowInactive": false, 
            "netName": "Rain-126", 
            "masterValveBefore": 10, 
            "wizardHasRun": true, 
            "apiVersion": "4.0.0", 
            "maxWateringCoef": 2, 
            "masterValveAfter": 10, 
            "zoneListShowInactive": true, 
            "selfTest": false, 
            "managedMode": true, 
            "localValveCount": 8, 
            "useMasterValve": false, 
            "zoneDuration": 60, 
            "keepDataHistory": false
          }, 
          "location": {
            "elevation": null, 
            "doyDownloaded": false, 
            "zip": null, 
            "stationID": -1, 
            "stationSource": "", 
            "et0Average": 1.2345, 
            "latitude": 36.755419000000006, 
            "state": "Default", 
            "stationName": "", 
            "wsDays": 3, 
            "stationDownloaded": false, 
            "address": "Default", 
            "rainSensitivity": 1, 
            "timezone": "America/Los_Angeles", 
            "longitude": -119.776022, 
            "name": "Fresno"
          }
        }

### POST
Sets device provision settings

+ Request (application/json)

        {
          "system": {
            "httpEnabled": true, 
            "useCommandLineArguments": false, 
            "hardwareVersion": 2, 
            "databasePath": "/rainmachine-app/DB/Default", 
            "programListShowInactive": true, 
            "programZonesShowInactive": false, 
            "netName": "Rain-126", 
            "masterValveBefore": 10, 
            "wizardHasRun": true, 
            "apiVersion": "4.0.0", 
            "maxWateringCoef": 2, 
            "masterValveAfter": 10, 
            "zoneListShowInactive": true, 
            "selfTest": false, 
            "managedMode": true, 
            "localValveCount": 8, 
            "useMasterValve": false, 
            "zoneDuration": 60, 
            "keepDataHistory": false
          }, 
          "location": {
            "elevation": null, 
            "doyDownloaded": false, 
            "zip": null, 
            "stationID": -1, 
            "stationSource": "", 
            "et0Average": 1.2345, 
            "latitude": 36.755419000000006, 
            "state": "Default", 
            "stationName": "", 
            "wsDays": 3, 
            "stationDownloaded": false, 
            "address": "Default", 
            "rainSensitivity": 1, 
            "timezone": "America/Los_Angeles", 
            "longitude": -119.776022, 
            "name": "Fresno"
          }
        }
+ Response 200 (application/json)

        {
            "statusCode": 0 
        }

## /provision/name
### GET
Returns device name 
+ Response 200 (application/json)

        {"name": "Verde-CIMIS"}

## POST
Sets device name
+ Response 200 (application/json)
        
        {
            "statusCode": 0 
        }


## GET /provision/wifi
Returns current WIFI configuration 
+ Response 200 (application/json)

        {
          "interface": "wlan0", 
          "macAddress": "18:c8:e7:81:a2:6e", 
          "ipAddress": "192.168.12.126", 
          "hasClientLink": true, 
          "mode": "managed"
        }

## GET /provision/wifi/scan
Returns Access Points in range with RainMachine 
+ Response 200 (application/json)

        {
          "scanResults": [
            {
              "SSID": "LinuxConsulting", 
              "isEncrypted": true, 
              "signal": "-52", 
              "isWEP": false, 
              "BSS": "00:23:69:F9:55:D1", 
              "isWPA": false, 
              "isWPA2": true, 
              "channel": "3"
            },    
            {
              "SSID": "RainMachine", 
              "isEncrypted": false, 
              "signal": "-41", 
              "isWEP": false, 
              "BSS": "1A:C8:E7:81:9A:B8", 
              "isWPA": false, 
              "isWPA2": false, 
              "channel": "11"
            }    
          ]
        }

## POST /provision/wifi/ssid
Sets the Access Point to which RainMachine will connect to
+ Response 200 (application/json)

        {
            "statusCode": 0 
        }

# Group Watering Programs
## /program
### GET
Get all watering programs defined on device

+ response 200 (application/json)

        {
          "programs": [
            {
              "uid": 1, 
              "name": "Daily program", 
              "active": true, 
              "startTime": "00:30", 
              "cycles": 3, 
              "soak": 4, 
              "cs_on": true, 
              "delay": 3, 
              "delay_on": true, 
              "status": 0, 
              "frequency": {
                "type": 0, 
                "param": "0"
              }, 
              "coef": 0.0, 
              "ignoreInternetWeather": false, 
              "futureField1": 0, 
              "freq_modified": 0, 
              "useWaterSense": false, 
              "nextRun": "2014-11-11", 
              "wateringTimes": [
                {
                  "id": 1, 
                  "name": "Zone 1", 
                  "duration": 0, 
                  "active": false
                }, 
                {
                  "id": 8, 
                  "name": "Zone 8", 
                  "duration": 90, 
                  "active": true
                }
              ]
            }
          ]
        }
        
### POST
Create a new Program (program id will be automatically generated)

+ Response 200 (application/json)

        { "statusCode": 0 }

## GET /program/nextrun
Returns next running date/time for all active programs

+ Response 200 (application/json)

        { }

##/program/{id}

+ Parameters
    + id (required, number, `1`) ... Numeric `id` of the program to retrieve
    
### GET
Get program with specified id

+ Response 200 (application/json)

        {
          "uid": 1, 
          "name": "Daily program", 
          "active": true, 
          "startTime": "00:30", 
          "cycles": 3, 
          "soak": 4, 
          "cs_on": true, 
          "delay": 3, 
          "delay_on": true, 
          "status": 0, 
          "frequency": {
            "type": 0, 
            "param": "0"
          }, 
          "coef": 0.0, 
          "ignoreInternetWeather": false, 
          "futureField1": 0, 
          "freq_modified": 0, 
          "useWaterSense": false, 
          "nextRun": "2014-11-11", 
          "wateringTimes": [
            {
              "id": 1, 
              "name": "Zone 1", 
              "duration": 0, 
              "active": false
            }, 
            {
              "id": 8, 
              "name": "Zone 8", 
              "duration": 90, 
              "active": true
            }
          ]
        }

### POST
Update program parameters with specified id
+ Response 200 (application/json)

        {}

## POST /program/{id}/delete
Delete Program with id

+ Parameters
    + id (required, number, `1`) ... Numeric `id` of the program to retrieve
    
+ Response 200 (application/json)

        {}
        
## POST /program/{id}/start
Start watering Program with id
+ Parameters
    + id (required, number, `1`) ... Numeric `id` of the program to retrieve

+ Response 200 (application/json)

        {}

## POST /program/{id}/stop
Remove Program with id from watering queue
+ Parameters
    + id (required, number, `1`) ... Numeric `id` of the program to retrieve
    
+ Response 200 (application/json)

        {}

# Group Watering Zones
## GET /zone

Returns a list of *all* zones and their generic properties
+ Response 200 (application/json)

        {
          "zones": [
            {
              "uid": 1, 
              "name": "Zone 1", 
              "state": 0, 
              "userDuration": 0, 
              "machineDuration": 0, 
              "remaining": 0, 
              "cycle": 0, 
              "noOfCycles": 0, 
              "restriction": false, 
              "type": 1, 
              "master": false
            }, 
            {
              "uid": 2, 
              "name": "Zone 2", 
              "state": 0, 
              "userDuration": 0, 
              "machineDuration": 0, 
              "remaining": 0, 
              "cycle": 0, 
              "noOfCycles": 0, 
              "restriction": false, 
              "type": 1, 
              "master": false
            }, 
            {
              "uid": 3, 
              "name": "Zone 3", 
              "state": 0, 
              "userDuration": 0, 
              "machineDuration": 0, 
              "remaining": 0, 
              "cycle": 0, 
              "noOfCycles": 0, 
              "restriction": false, 
              "type": 1, 
              "master": false
            }, 
            {
              "uid": 4, 
              "name": "Zone 4", 
              "state": 0, 
              "userDuration": 0, 
              "machineDuration": 0, 
              "remaining": 0, 
              "cycle": 0, 
              "noOfCycles": 0, 
              "restriction": false, 
              "type": 1, 
              "master": false
            }, 
            {
              "uid": 5, 
              "name": "Zone 5", 
              "state": 0, 
              "userDuration": 0, 
              "machineDuration": 0, 
              "remaining": 0, 
              "cycle": 0, 
              "noOfCycles": 0, 
              "restriction": false, 
              "type": 1, 
              "master": false
            }, 
            {
              "uid": 6, 
              "name": "Zone 6", 
              "state": 0, 
              "userDuration": 0, 
              "machineDuration": 0, 
              "remaining": 0, 
              "cycle": 0, 
              "noOfCycles": 0, 
              "restriction": false, 
              "type": 1, 
              "master": false
            }, 
            {
              "uid": 7, 
              "name": "Zone 7", 
              "state": 0, 
              "userDuration": 0, 
              "machineDuration": 0, 
              "remaining": 0, 
              "cycle": 0, 
              "noOfCycles": 0, 
              "restriction": false, 
              "type": 1, 
              "master": false
            }, 
            {
              "uid": 8, 
              "name": "Zone 8", 
              "state": 0, 
              "userDuration": 0, 
              "machineDuration": 0, 
              "remaining": 0, 
              "cycle": 0, 
              "noOfCycles": 0, 
              "restriction": false, 
              "type": 1, 
              "master": false
            }
          ]
        }
        
## GET /zone/properties
Returns advanced properties for *all* zones
+ Response 200 (application/json)

        {
          "zones": [
            {
              "uid": 1, 
              "name": "Zone 1", 
              "valveid": 1, 
              "ETcoef": 1, 
              "active": true, 
              "type": 1, 
              "internet": true, 
              "savings": 50, 
              "slope": 1, 
              "sun": 1, 
              "soil": 1, 
              "group_id": 0, 
              "history": true, 
              "master": false, 
              "before": 10, 
              "after": 10
            }, 
            {
              "uid": 2, 
              "name": "Zone 2", 
              "valveid": 2, 
              "ETcoef": 1, 
              "active": true, 
              "type": 1, 
              "internet": true, 
              "savings": 50, 
              "slope": 1, 
              "sun": 1, 
              "soil": 1, 
              "group_id": 0, 
              "history": true, 
              "master": false, 
              "before": 10, 
              "after": 10
            }, 
            {
              "uid": 3, 
              "name": "Zone 3", 
              "valveid": 3, 
              "ETcoef": 1, 
              "active": true, 
              "type": 1, 
              "internet": true, 
              "savings": 50, 
              "slope": 1, 
              "sun": 1, 
              "soil": 1, 
              "group_id": 0, 
              "history": true, 
              "master": false, 
              "before": 10, 
              "after": 10
            }, 
            {
              "uid": 4, 
              "name": "Zone 4", 
              "valveid": 4, 
              "ETcoef": 1, 
              "active": true, 
              "type": 1, 
              "internet": true, 
              "savings": 50, 
              "slope": 1, 
              "sun": 1, 
              "soil": 1, 
              "group_id": 0, 
              "history": true, 
              "master": false, 
              "before": 10, 
              "after": 10
            }, 
            {
              "uid": 5, 
              "name": "Zone 5", 
              "valveid": 5, 
              "ETcoef": 1, 
              "active": true, 
              "type": 1, 
              "internet": true, 
              "savings": 50, 
              "slope": 1, 
              "sun": 1, 
              "soil": 1, 
              "group_id": 0, 
              "history": true, 
              "master": false, 
              "before": 10, 
              "after": 10
            }, 
            {
              "uid": 6, 
              "name": "Zone 6", 
              "valveid": 6, 
              "ETcoef": 1, 
              "active": true, 
              "type": 1, 
              "internet": true, 
              "savings": 50, 
              "slope": 1, 
              "sun": 1, 
              "soil": 1, 
              "group_id": 0, 
              "history": true, 
              "master": false, 
              "before": 10, 
              "after": 10
            }, 
            {
              "uid": 7, 
              "name": "Zone 7", 
              "valveid": 7, 
              "ETcoef": 1, 
              "active": true, 
              "type": 1, 
              "internet": true, 
              "savings": 50, 
              "slope": 1, 
              "sun": 1, 
              "soil": 1, 
              "group_id": 0, 
              "history": true, 
              "master": false, 
              "before": 10, 
              "after": 10
            }, 
            {
              "uid": 8, 
              "name": "Zone 8", 
              "valveid": 8, 
              "ETcoef": 1, 
              "active": true, 
              "type": 1, 
              "internet": true, 
              "savings": 50, 
              "slope": 1, 
              "sun": 1, 
              "soil": 1, 
              "group_id": 0, 
              "history": true, 
              "master": false, 
              "before": 10, 
              "after": 10
            }
          ]
        }

        
## /zone/{id}/properties
+ Parameters
    + id (required, number, `1`) ... Numeric `id` of the zone to water

### GET
Retrieve properties for zone with id

+ Response 200 (application/json)

        {
          "uid": 1, 
          "name": "Zone 1", 
          "valveid": 1, 
          "ETcoef": 1, 
          "active": true, 
          "type": 1, 
          "internet": true, 
          "savings": 50, 
          "slope": 1, 
          "sun": 1, 
          "soil": 1, 
          "group_id": 0, 
          "history": true, 
          "master": false, 
          "before": 10, 
          "after": 10
        }

### POST
Set properties for zone with id

+ Response 200 (application/json)

        {  }

## POST /zone/{id}/start
Start watering zone with id
+ Parameters
    + id (required, number, `1`) ... Numeric `id` of the zone to water

+ Response 200 (application/json)

        {}
        
## POST /zone/{id}/stop
Stop watering zone with id
+ Parameters
    + id (required, number, `1`) ... Numeric `id` of the zone to stop watering

+ Response 200 (application/json)

        {}

# Group Watering Information
## GET /watering/zone
Returns status of watering on *all* zones
+ Response 200 (application/json)

        {
          "zones": [
            {
              "uid": 1, 
              "name": "Zone 1", 
              "state": 0, 
              "userDuration": 0, 
              "machineDuration": 0, 
              "remaining": 0, 
              "cycle": 0, 
              "noOfCycles": 0, 
              "restriction": false
            }, 
            {
              "uid": 2, 
              "name": "Zone 2", 
              "state": 0, 
              "userDuration": 0, 
              "machineDuration": 0, 
              "remaining": 0, 
              "cycle": 0, 
              "noOfCycles": 0, 
              "restriction": false
            }, 
            {
              "uid": 3, 
              "name": "Zone 3", 
              "state": 0, 
              "userDuration": 0, 
              "machineDuration": 0, 
              "remaining": 0, 
              "cycle": 0, 
              "noOfCycles": 0, 
              "restriction": false
            }, 
            {
              "uid": 4, 
              "name": "Zone 4", 
              "state": 0, 
              "userDuration": 0, 
              "machineDuration": 0, 
              "remaining": 0, 
              "cycle": 0, 
              "noOfCycles": 0, 
              "restriction": false
            }, 
            {
              "uid": 5, 
              "name": "Zone 5", 
              "state": 0, 
              "userDuration": 0, 
              "machineDuration": 0, 
              "remaining": 0, 
              "cycle": 0, 
              "noOfCycles": 0, 
              "restriction": false
            }, 
            {
              "uid": 6, 
              "name": "Zone 6", 
              "state": 0, 
              "userDuration": 0, 
              "machineDuration": 0, 
              "remaining": 0, 
              "cycle": 0, 
              "noOfCycles": 0, 
              "restriction": false
            }, 
            {
              "uid": 7, 
              "name": "Zone 7", 
              "state": 0, 
              "userDuration": 0, 
              "machineDuration": 0, 
              "remaining": 0, 
              "cycle": 0, 
              "noOfCycles": 0, 
              "restriction": false
            }, 
            {
              "uid": 8, 
              "name": "Zone 8", 
              "state": 0, 
              "userDuration": 0, 
              "machineDuration": 0, 
              "remaining": 0, 
              "cycle": 0, 
              "noOfCycles": 0, 
              "restriction": false
            }
          ]
        }

## GET /watering/program
Returns the running watering program if any

+ Response 200 (application/json)

        { "programs": [] }

## GET /watering/queue
Returns the entire current watering queue

+ Response 200 (application/json)

        { "queue": []  }
        
## GET /watering/past
Returns the et0 and qpf values used on the last runs of programs, including the date on which the programs started

+ Response 200 (application/json)

        {
          "pastValues": [
            {
              "pid": 1, 
              "dateTimestamp": 1418025600, 
              "dateTime": "2014-12-08 00:00:00", 
              "used": 1, 
              "et0": 0.7508403396708584, 
              "qpf": 0
            }
          ]
        }

## GET /watering/available
Returns the available water in soil for each zone

+ Response 200 (application/json)

        {
          "availableWaterValues": [
            {
              "dateTime": "2014-12-08 00:00:00", 
              "day": 1418025600, 
              "pid": 1, 
              "zid": 8, 
              "aw": 19.60317710318884
            }, 
            {
              "dateTime": "2014-12-07 00:00:00", 
              "day": 1417939200, 
              "pid": 1, 
              "zid": 8, 
              "aw": 19.653164729968374
            }, 
            {
              "dateTime": "2014-12-06 00:00:00", 
              "day": 1417852800, 
              "pid": 1, 
              "zid": 8, 
              "aw": 19.40323269049864
            }, 
            {
              "dateTime": "2014-12-05 00:00:00", 
              "day": 1417766400, 
              "pid": 1, 
              "zid": 8, 
              "aw": 19.469913502450538
            }, 
            {
              "dateTime": "2014-12-03 00:00:00", 
              "day": 1417593600, 
              "pid": 1, 
              "zid": 8, 
              "aw": 0.0
            }, 
            {
              "dateTime": "2014-12-02 00:00:00", 
              "day": 1417507200, 
              "pid": 1, 
              "zid": 8, 
              "aw": 0.0
            }, 
            {
              "dateTime": "2014-11-28 00:00:00", 
              "day": 1417161600, 
              "pid": 1, 
              "zid": 8, 
              "aw": 0.0
            }
          ]
        }



# Group Watering Restrictions   
Watering Restriction Hourly, Daily, Weekly, Monthly and Freeze Control/Rain Delay

## /restrictions/global
### GET
Returns global watering restrictions
+ Response 200 (application/json)

        {
          "hotDaysExtraWatering": false, //Enable watering over 100% of the user specified time
          "freezeProtectEnabled": false,
          "freezeProtectTemp": 2, 
          "noWaterInWeekDays": "0000000", 
          "noWaterInMonths": "000000000000", 
          "rainDelayStartTime": -1,  //Program a rain delay to take place at the specified time
          "rainDelayDuration": 0
        }

### POST
Sets global watering restrictions

## /restrictions/hourly
### GET
Returns hourly restrictions for watering
### POST
Sets a new hourly restriction

## POST /restrictions/hourly/{id}/delete
Removes an hourly restriction

##/restrictions/raindelay
### GET
Returns the number of seconds until the forced Rain Delay mode is finished
+ Response 200 (application/json)

        {
          "delayCounter": 86397
        }

### POST
Sets the number of days for which a Rain Delay is wanted

# Group Daily Stats
Daily Statistics and Weather
##/dailystats
### GET
Returns daily statistics information

##/dailystats/{date}
###GET
+ Parameters
    + date (required, date, `2014-10-11`) ... Date for which the data is wanted
+ Response 200 (application/json)

        {
          "id": 0, //day 0 current negative past, >0 future day
          "day": "2014-12-08", 
          "mint": 8.38, 
          "maxt": 19.31, 
          "icon": 3, 
          "percentage": 0, 
          "wateringFlag": 0, 
          "vibration": [ //vibration feature, how the percetage varies with forecast prediction
            0, 
            0, 
            0, 
            0, 
            0, 
            0, 
            0, 
            0, 
            0, 
            0
          ]
        }

# Group Weather Parsers
Parsers information, data and parameters
##/parser
###GET
Returns information about all weather parsers available
+ Response 200 (application/json)

        {
          "parsers": [
            {
              "lastRun": "2014-12-08 00:07:13", 
              "enabled": true, 
              "uid": 1, 
              "name": "NOAA Parser"
            }, 
            {
              "lastRun": "2014-12-08 00:08:21", 
              "params": {
                "appKey": "523cf689-7ba6-47bd-a2be-6dc1c1ba9afb", 
                "station": 2, 
                "historicDays": 5, 
                "customStation": true
              }, 
              "enabled": true, 
              "uid": 3, 
              "name": "CIMIS Parser"
            }, 
            {
              "lastRun": "2014-12-08 00:07:13", 
              "params": {
                "appKey": "922309bbf729baba82616dca01572d3057eead89", 
                "useProxy": true
              }, 
              "enabled": true, 
              "uid": 5, 
              "name": "ForecastIO Parser"
            }, 
            {
              "lastRun": null, 
              "enabled": false, 
              "uid": 4, 
              "name": "My Example Parser"
            }, 
            {
              "lastRun": null, 
              "enabled": false, 
              "uid": 2, 
              "name": "Simulator Parser"
            }
          ]
        }

##/parser/{id}
###GET 
Returns detalied information about parser
+ Parameters
    + id (required, number, `1`) ... Numeric `id` of the parser
+ Response 200 (application/json)

        {
          "parser": {
            "lastRun": null, 
            "params": {
              "station": 2, 
              "customStation": true, 
              "historicDays": 5
            }, 
            "enabled": false, 
            "uid": 2, 
            "name": "CIMIS Parser"
          }
        }

## GET /parser/{id}/data
## GET /parser/{id}/data/{date}
## GET /parser/{id}/data/{date}/{days}
+ Parameters
    + date (required, date, `2014-10-11`) ... Date for which the data is wanted
    + days (optional, int, `30`) ... How many days to return


## POST /parser/{id}/activate
## POST /parser/{id}/params

# Group Weather Mixed Data
Mixed weather data from parsers
## GET /mixer
Return all available mixer data
## GET /mixer/{date}
## GET /mixer/{date}/{days}
+ Parameters
    + date (required, date, `2014-10-11`) ... Date for which the data is wanted
    + days (optional, int, `30`) ... How many days to return

# Group Diagnostics
Software diagnostics, logs and status
##/diag
###GET
Returns software status
##/diag/upload
###GET
Returns diagnostics upload status
###POST
Starts diagnostics upload to RainMachine support server
##/diag/download
###GET
Retrieves an archive with logs and databases from RainMachine

# Group Machine
## /machine/time
### GET
Returns the time on machine
### POST 
Changes the time on machine
## /machine/update
### GET
Returns software update status
### POST 
Initiates a software update
##/machine/sysupgrade
###POST
Initiate a firmware download and install
## /machine/ssh
### POST
Disable/Enable ssh daemon
## /machine/touch
### POST
Disable/Enable touch interface. Use if you want a 3rd party application to control the leds/touch buttons

